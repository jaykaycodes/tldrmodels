---
import constants from "#/constants";

import Icon from "./Icon.astro";

const path = Astro.url.pathname;
---

<div class="navbar bg-base-100">
  <div class="navbar-start">
    <div class="dropdown">
      <button tabindex="0" role="button" class="btn btn-ghost lg:hidden">
        <Icon type="lucide" name="menu" width={24} height={24} />
      </button>
      <ul
        tabindex="0"
        class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52"
      >
        <li>
          <a href="/models" class:list={[{ active: path === "/models" }]}
            >Models</a>
        </li>
        <li>
          <div class="form-control relative">
            <input
              id="search-mobile"
              type="text"
              placeholder="Search"
              class="input input-bordered w-full"
            />
            <div
              id="search-results-mobile"
              class="absolute top-full left-0 mt-1 bg-base-200 border border-base-300 hidden w-full z-10 p-2 rounded-box shadow"
            >
            </div>
          </div>
        </li>
      </ul>
    </div>
    <a href="/" class="btn btn-ghost text-xl normal-case"
      >{constants.SITE_NAME}</a
    >
  </div>
  <div class="navbar-center hidden lg:flex">
    <ul class="menu menu-horizontal px-1">
      <li>
        <a
          href="/models"
          class:list={["btn btn-ghost", { "btn-active": path === "/models" }]}
          >Models</a>
      </li>
    </ul>
  </div>
  <div class="navbar-end">
    <div class="form-control relative hidden sm:block">
      <input
        id="search"
        type="text"
        placeholder="Search (Ctrl+K)"
        class="input input-bordered w-24 md:w-auto"
      />
      <div
        id="search-results"
        class="absolute top-full right-0 mt-1 bg-base-200 border border-base-300 hidden w-96 z-10 p-2 rounded-box shadow"
      >
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // Combine search logic for both desktop and mobile
  const setupSearch = (inputId, resultsId) => {
    const searchElement = document.querySelector(`#${inputId}`);
    const resultsContainer = document.querySelector(`#${resultsId}`);
    if (!searchElement || !resultsContainer) return;

    let focusIndex = -1;
    let pagefind;

    const loadPagefind = async () => {
      if (!pagefind) {
        pagefind = await import("/pagefind/pagefind.js");
      }
    };

    const performSearch = async (query) => {
      if (!query) {
        resultsContainer.innerHTML = "";
        resultsContainer.style.display = "none";
        return;
      }

      await loadPagefind();
      const search = await pagefind.search(query);
      resultsContainer.innerHTML = ""; // Clear previous results

      if (search.results.length === 0) {
        resultsContainer.innerHTML = '<p class="p-2">No results found</p>';
      } else {
        let i = 0;
        for (const result of search.results) {
          i++;
          const data = await result.data();
          // NOTE: Using daisyUI menu structure for results
          resultsContainer.innerHTML += `
            <li>
              <a href="${data.url}">
                <div class="flex flex-col">
                  <span class="font-bold">${data.meta.title}</span>
                  <span class="text-sm text-base-content/70">${data.excerpt}</span>
                </div>
              </a>
            </li>
            ${i < search.results.length ? '<li><div class="divider my-0"></div></li>' : ""}
          `;
        }
        // Wrap results in a menu for styling
        resultsContainer.innerHTML = `<ul class="menu bg-base-200 rounded-box w-full">${resultsContainer.innerHTML}</ul>`;
      }
      resultsContainer.style.display = "block";
    };

    searchElement.addEventListener("focus", async () => {
      await loadPagefind(); // Preload on focus
      resultsContainer.style.display = "block"; // Show container, might be empty
      // Clear placeholder only on focus if needed, handled by CSS focus state often
      // searchElement.placeholder = '';
    });

    searchElement.addEventListener("blur", (e) => {
      // Use setTimeout to allow clicking on results
      setTimeout(() => {
        if (
          !resultsContainer.contains(document.activeElement) &&
          document.activeElement !== searchElement
        ) {
          resultsContainer.style.display = "none";
          focusIndex = -1;
          // Restore placeholder if needed
          // searchElement.placeholder = searchElement.id === 'search-mobile' ? 'Search' : 'Search (Ctrl+K)';
        }
      }, 150); // Increased timeout slightly
    });

    searchElement.addEventListener("input", (e) => {
      performSearch(e.target.value);
      focusIndex = -1; // Reset focus index on new input
    });

    // Keyboard navigation (ArrowDown, ArrowUp, Escape)
    searchElement.addEventListener("keydown", (e) => {
      const resultsLinks = resultsContainer.querySelectorAll("a");
      if (!resultsLinks.length) return;

      if (e.key === "ArrowDown") {
        e.preventDefault();
        focusIndex = (focusIndex + 1) % resultsLinks.length;
        resultsLinks[focusIndex]?.focus();
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        focusIndex =
          (focusIndex - 1 + resultsLinks.length) % resultsLinks.length;
        resultsLinks[focusIndex]?.focus();
      } else if (e.key === "Enter" && focusIndex > -1) {
        // Allow selecting result with Enter
        resultsLinks[focusIndex]?.click();
      }
    });

    // Close results when focusing out of the results container itself
    resultsContainer.addEventListener("focusout", (e) => {
      // Check if the new focused element is outside the search input and results
      if (
        !e.relatedTarget ||
        (!resultsContainer.contains(e.relatedTarget) &&
          e.relatedTarget !== searchElement)
      ) {
        setTimeout(() => {
          // Use timeout to allow interaction finish
          if (
            !resultsContainer.contains(document.activeElement) &&
            document.activeElement !== searchElement
          ) {
            resultsContainer.style.display = "none";
            focusIndex = -1;
          }
        }, 150);
      }
    });
  };

  // Global Ctrl+K listener
  document.addEventListener("keydown", (e) => {
    const searchDesktop = document.querySelector("#search");
    if (e.key === "k" && e.ctrlKey && searchDesktop) {
      e.preventDefault(); // Prevent browser's default Ctrl+K
      searchDesktop.focus();
    }
    // Global Escape listener to close active search results
    if (e.key === "Escape") {
      const activeResults =
        document.querySelector(
          '#search-results:not([style*="display: none"])'
        ) ||
        document.querySelector(
          '#search-results-mobile:not([style*="display: none"])'
        );
      if (activeResults) {
        activeResults.style.display = "none";
        // Optionally blur the input as well
        const searchInput = activeResults.id.includes("mobile")
          ? document.querySelector("#search-mobile")
          : document.querySelector("#search");
        searchInput?.blur();
      }
    }
  });

  // Initialize search for both desktop and mobile
  document.addEventListener("DOMContentLoaded", () => {
    setupSearch("search", "search-results");
    setupSearch("search-mobile", "search-results-mobile");

    // Handle placeholder change based on screen size (optional, could use CSS)
    const searchDesktopInput = document.querySelector("#search");
    const handleResize = () => {
      if (!searchDesktopInput) return;
      if (window.matchMedia("(max-width: 640px)").matches) {
        // Placeholder is only visible on larger screens in this layout
      } else {
        searchDesktopInput.placeholder = "Search (Ctrl+K)";
      }
    };
    // window.addEventListener('resize', handleResize);
    // handleResize(); // Initial check
  });

  // NOTE: Mobile nav toggle is handled by daisyUI dropdown component now.
  // The old navToggle logic is removed.
</script>
